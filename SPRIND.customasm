;
; SPRIND ISA Assembly Language Specification
;

#once

#const ISA_VERSION_MAJOR = 0
#const ISA_VERSION_MINOR = 2
#const ISA_VERSION_PATCH = 1

#subruledef Reg {
  sp => 0b000
  x  => 0b001
  y  => 0b010
  z  => 0b011
  w  => 0b100
  v  => 0b101
  a  => 0b110
  b  => 0b111
}

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lb)                  38%  ##############################
instr(lw)                  38%  ##############################
instr(sb)                  38%  ##############################
instr(sw)                  38%  ##############################
mem                         0%  
trying splittag `byte`...
Left: [lw,sw]
Right: [lb,sb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lw)                  75%  ############################################################
instr(sw)                  75%  ############################################################
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sw]
Right: [lw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lb)                  75%  ############################################################
instr(sb)                  75%  ############################################################
byte                        0%  
mem                         0%  
trying splittag `load`...
Left: [sb]
Right: [lb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lb)                  38%  ##############################
instr(lw)                  38%  ##############################
instr(sb)                  38%  ##############################
instr(sw)                  38%  ##############################
mem                         0%  
trying splittag `byte`...
Left: [lw,sw]
Right: [lb,sb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lw)                  75%  ############################################################
instr(sw)                  75%  ############################################################
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sw]
Right: [lw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lb)                  75%  ############################################################
instr(sb)                  75%  ############################################################
byte                        0%  
mem                         0%  
trying splittag `load`...
Left: [sb]
Right: [lb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lb)                  38%  ##############################
instr(lw)                  38%  ##############################
instr(sb)                  38%  ##############################
instr(sw)                  38%  ##############################
mem                         0%  
trying splittag `byte`...
Left: [lw,sw]
Right: [lb,sb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lw)                  75%  ############################################################
instr(sw)                  75%  ############################################################
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sw]
Right: [lw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lb)                  75%  ############################################################
instr(sb)                  75%  ############################################################
byte                        0%  
mem                         0%  
trying splittag `load`...
Left: [sb]
Right: [lb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lb)                  38%  ##############################
instr(lw)                  38%  ##############################
instr(sb)                  38%  ##############################
instr(sw)                  38%  ##############################
mem                         0%  
trying splittag `byte`...
Left: [lw,sw]
Right: [lb,sb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lw)                  75%  ############################################################
instr(sw)                  75%  ############################################################
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sw]
Right: [lw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lb)                  75%  ############################################################
instr(sb)                  75%  ############################################################
byte                        0%  
mem                         0%  
trying splittag `load`...
Left: [sb]
Right: [lb]

--------------------------------------------------------------------------------
cond                       67%  #####################################################
instr(b)                   50%  ########################################
instr(bf)                  50%  ########################################
instr(bt)                  50%  ########################################
pc                          0%  
trying splittag `cond`...
Left: [b]
Right: [bt,bf]

--------------------------------------------------------------------------------
instr(bf)                  75%  ############################################################
instr(bt)                  75%  ############################################################
cond                        0%  
pc                          0%  
trying splittag `instr(bf)`...
Left: [bt]
Right: [bf]

--------------------------------------------------------------------------------
cond                       67%  #####################################################
instr(b)                   50%  ########################################
instr(bf)                  50%  ########################################
instr(bt)                  50%  ########################################
pc                          0%  
trying splittag `cond`...
Left: [b]
Right: [bt,bf]

--------------------------------------------------------------------------------
instr(bf)                  75%  ############################################################
instr(bt)                  75%  ############################################################
cond                        0%  
pc                          0%  
trying splittag `instr(bf)`...
Left: [bt]
Right: [bf]

--------------------------------------------------------------------------------
cond                       67%  #####################################################
instr(b)                   50%  ########################################
instr(bf)                  50%  ########################################
instr(bt)                  50%  ########################################
pc                          0%  
trying splittag `cond`...
Left: [b]
Right: [bt,bf]

--------------------------------------------------------------------------------
instr(bf)                  75%  ############################################################
instr(bt)                  75%  ############################################################
cond                        0%  
pc                          0%  
trying splittag `instr(bf)`...
Left: [bt]
Right: [bf]

--------------------------------------------------------------------------------
shift                     100%  ################################################################################
sxt                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(li)                  75%  ############################################################
instr(szi)                 75%  ############################################################
data                        0%  
trying splittag `shift`...
Left: [li]
Right: [szi]

--------------------------------------------------------------------------------
shift                     100%  ################################################################################
sxt                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(li)                  75%  ############################################################
instr(szi)                 75%  ############################################################
data                        0%  
trying splittag `shift`...
Left: [li]
Right: [szi]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
bitwise                   100%  ################################################################################
ts                         90%  ########################################################################
mem                        80%  ################################################################
bit                        70%  ########################################################
cmp                        70%  ########################################################
global                     50%  ########################################
inequality                 50%  ########################################
shift                      40%  ################################
<                          30%  ########################
>=                         30%  ########################
byte                       30%  ########################
clear                      30%  ########################
equality                   30%  ########################
load                       30%  ########################
right                      30%  ########################
set                        30%  ########################
signed                     30%  ########################
store                      30%  ########################
unsigned                   30%  ########################
word                       30%  ########################
left                       20%  ################
not                        20%  ################
sxt                        20%  ################
zxt                        20%  ################
add                        10%  ########
and                        10%  ########
arith                      10%  ########
boolean                    10%  ########
carry                      10%  ########
logical                    10%  ########
or                         10%  ########
sub                        10%  ########
xor                        10%  ########
instr(asr)                  7%  ######
instr(cbit)                 7%  ######
instr(cbitm)                7%  ######
instr(lgb)                  7%  ######
instr(lgw)                  7%  ######
instr(lsl)                  7%  ######
instr(lsr)                  7%  ######
instr(sbit)                 7%  ######
instr(sbitm)                7%  ######
instr(sgb)                  7%  ######
instr(sgw)                  7%  ######
instr(taei)                 7%  ######
instr(tbi)                  7%  ######
instr(tbit)                 7%  ######
instr(tbitm)                7%  ######
instr(teqi)                 7%  ######
instr(tgei)                 7%  ######
instr(tli)                  7%  ######
instr(tnei)                 7%  ######
instr(addi)                 0%  
instr(addicy)               0%  
instr(andi)                 0%  
instr(ori)                  0%  
instr(subi)                 0%  
instr(subicy)               0%  
instr(xori)                 0%  
trying splittag `bitwise`...
Left: [lgb,lgw,sgb,sgw,tli,tgei,tbi,taei,tnei,teqi]
Right: [tbit,cbit,sbit,lsr,lsl,asr,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
cmp                        80%  ################################################################
global                     80%  ################################################################
inequality                 80%  ################################################################
mem                        80%  ################################################################
ts                         80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
byte                       40%  ################################
equality                   40%  ################################
load                       40%  ################################
signed                     40%  ################################
store                      40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
not                        20%  ################
instr(lgb)                 15%  ############
instr(lgw)                 15%  ############
instr(sgb)                 15%  ############
instr(sgw)                 15%  ############
instr(taei)                15%  ############
instr(tbi)                 15%  ############
instr(teqi)                15%  ############
instr(tgei)                15%  ############
instr(tli)                 15%  ############
instr(tnei)                15%  ############
trying splittag `cmp`...
Left: [lgb,lgw,sgb,sgw]
Right: [tli,tgei,tbi,taei,tnei,teqi]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
load                      100%  ################################################################################
store                     100%  ################################################################################
word                      100%  ################################################################################
instr(lgb)                 38%  ##############################
instr(lgw)                 38%  ##############################
instr(sgb)                 38%  ##############################
instr(sgw)                 38%  ##############################
global                      0%  
mem                         0%  
trying splittag `byte`...
Left: [lgw,sgw]
Right: [lgb,sgb]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgw)                 75%  ############################################################
instr(sgw)                 75%  ############################################################
global                      0%  
mem                         0%  
word                        0%  
trying splittag `load`...
Left: [sgw]
Right: [lgw]

--------------------------------------------------------------------------------
load                      100%  ################################################################################
store                     100%  ################################################################################
instr(lgb)                 75%  ############################################################
instr(sgb)                 75%  ############################################################
byte                        0%  
global                      0%  
mem                         0%  
trying splittag `load`...
Left: [sgb]
Right: [lgb]

--------------------------------------------------------------------------------
inequality                 67%  #####################################################
<                          67%  #####################################################
>=                         67%  #####################################################
equality                   67%  #####################################################
signed                     67%  #####################################################
unsigned                   67%  #####################################################
not                        33%  ###########################
instr(taei)                25%  ####################
instr(tbi)                 25%  ####################
instr(teqi)                25%  ####################
instr(tgei)                25%  ####################
instr(tli)                 25%  ####################
instr(tnei)                25%  ####################
cmp                         0%  
ts                          0%  
trying splittag `inequality`...
Left: [tnei,teqi]
Right: [tli,tgei,tbi,taei]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teqi)                75%  ############################################################
instr(tnei)                75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teqi]
Right: [tnei]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                38%  ##############################
instr(tbi)                 38%  ##############################
instr(tgei)                38%  ##############################
instr(tli)                 38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tgei,taei]
Right: [tli,tbi]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(taei)                75%  ############################################################
instr(tgei)                75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [taei]
Right: [tgei]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tbi)                 75%  ############################################################
instr(tli)                 75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tbi]
Right: [tli]

--------------------------------------------------------------------------------
ts                        100%  ################################################################################
mem                        80%  ################################################################
shift                      80%  ################################################################
bit                        60%  ################################################
clear                      60%  ################################################
right                      60%  ################################################
set                        60%  ################################################
left                       40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
<                          20%  ################
>=                         20%  ################
add                        20%  ################
and                        20%  ################
arith                      20%  ################
boolean                    20%  ################
byte                       20%  ################
carry                      20%  ################
cmp                        20%  ################
equality                   20%  ################
global                     20%  ################
inequality                 20%  ################
load                       20%  ################
logical                    20%  ################
not                        20%  ################
or                         20%  ################
signed                     20%  ################
store                      20%  ################
sub                        20%  ################
unsigned                   20%  ################
word                       20%  ################
xor                        20%  ################
instr(asr)                 15%  ############
instr(cbit)                15%  ############
instr(cbitm)               15%  ############
instr(lsl)                 15%  ############
instr(lsr)                 15%  ############
instr(sbit)                15%  ############
instr(sbitm)               15%  ############
instr(tbit)                15%  ############
instr(tbitm)               15%  ############
bitwise                     0%  
trying splittag `ts`...
Left: [cbit,sbit,lsr,lsl,asr]
Right: [tbit,tbitm,cbitm,sbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
bit                        80%  ################################################################
right                      80%  ################################################################
shift                      80%  ################################################################
clear                      40%  ################################
left                       40%  ################################
set                        40%  ################################
sxt                        40%  ################################
zxt                        40%  ################################
instr(asr)                 30%  ########################
instr(cbit)                30%  ########################
instr(lsl)                 30%  ########################
instr(lsr)                 30%  ########################
instr(sbit)                30%  ########################
bitwise                     0%  
trying splittag `bit`...
Left: [lsr,lsl,asr]
Right: [cbit,sbit]

--------------------------------------------------------------------------------
right                      67%  #####################################################
left                       67%  #####################################################
sxt                        67%  #####################################################
zxt                        67%  #####################################################
instr(asr)                 50%  ########################################
instr(lsl)                 50%  ########################################
instr(lsr)                 50%  ########################################
bitwise                     0%  
shift                       0%  
trying splittag `right`...
Left: [lsl]
Right: [lsr,asr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(asr)                 75%  ############################################################
instr(lsr)                 75%  ############################################################
bitwise                     0%  
right                       0%  
shift                       0%  
trying splittag `sxt`...
Left: [lsr]
Right: [asr]

--------------------------------------------------------------------------------
clear                     100%  ################################################################################
set                       100%  ################################################################################
instr(cbit)                75%  ############################################################
instr(sbit)                75%  ############################################################
bit                         0%  
bitwise                     0%  
trying splittag `clear`...
Left: [sbit]
Right: [cbit]

--------------------------------------------------------------------------------
clear                      80%  ################################################################
set                        80%  ################################################################
<                          40%  ################################
>=                         40%  ################################
add                        40%  ################################
and                        40%  ################################
arith                      40%  ################################
boolean                    40%  ################################
byte                       40%  ################################
carry                      40%  ################################
cmp                        40%  ################################
equality                   40%  ################################
global                     40%  ################################
inequality                 40%  ################################
left                       40%  ################################
load                       40%  ################################
logical                    40%  ################################
not                        40%  ################################
or                         40%  ################################
right                      40%  ################################
shift                      40%  ################################
signed                     40%  ################################
store                      40%  ################################
sub                        40%  ################################
sxt                        40%  ################################
unsigned                   40%  ################################
word                       40%  ################################
xor                        40%  ################################
zxt                        40%  ################################
mem                        40%  ################################
instr(cbitm)               30%  ########################
instr(sbitm)               30%  ########################
instr(tbit)                30%  ########################
instr(tbitm)               30%  ########################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `clear`...
Left: [tbit,tbitm,sbitm]
Right: [cbitm,subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
mem                        67%  #####################################################
set                        67%  #####################################################
instr(sbitm)               50%  ########################################
instr(tbit)                50%  ########################################
instr(tbitm)               50%  ########################################
bit                         0%  
bitwise                     0%  
ts                          0%  
trying splittag `mem`...
Left: [tbit]
Right: [tbitm,sbitm]

--------------------------------------------------------------------------------
set                       100%  ################################################################################
instr(sbitm)               75%  ############################################################
instr(tbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
mem                         0%  
ts                          0%  
trying splittag `set`...
Left: [tbitm]
Right: [sbitm]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
boolean                   100%  ################################################################################
byte                      100%  ################################################################################
carry                     100%  ################################################################################
cmp                       100%  ################################################################################
equality                  100%  ################################################################################
global                    100%  ################################################################################
inequality                100%  ################################################################################
left                      100%  ################################################################################
load                      100%  ################################################################################
logical                   100%  ################################################################################
not                       100%  ################################################################################
or                        100%  ################################################################################
right                     100%  ################################################################################
set                       100%  ################################################################################
shift                     100%  ################################################################################
signed                    100%  ################################################################################
store                     100%  ################################################################################
sub                       100%  ################################################################################
sxt                       100%  ################################################################################
unsigned                  100%  ################################################################################
word                      100%  ################################################################################
xor                       100%  ################################################################################
zxt                       100%  ################################################################################
instr(cbitm)               75%  ############################################################
bit                         0%  
bitwise                     0%  
clear                       0%  
mem                         0%  
ts                          0%  
trying splittag `<`...
Left: [cbitm]
Right: [subcat_tags_instrs(alu,[<,>=,add,and,arith,bit,bitwise,boolean,byte,carry,clear,cmp,equality,global,inequality,left,load,logical,mem,not,or,right,set,shift,signed,store,sub,sxt,ts,unsigned,word,xor,zxt],[addi,subi,andi,ori,xori,addicy,subicy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(addi)                21%  #################
instr(addicy)              21%  #################
instr(andi)                21%  #################
instr(ori)                 21%  #################
instr(subi)                21%  #################
instr(subicy)              21%  #################
instr(xori)                21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [andi,ori,xori]
Right: [addi,subi,addicy,subicy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(andi)                50%  ########################################
instr(ori)                 50%  ########################################
instr(xori)                50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [ori,xori]
Right: [andi]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(ori)                 75%  ############################################################
instr(xori)                75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xori]
Right: [ori]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(addi)                38%  ##############################
instr(addicy)              38%  ##############################
instr(subi)                38%  ##############################
instr(subicy)              38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [subi,subicy]
Right: [addi,addicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(subi)                75%  ############################################################
instr(subicy)              75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [subi]
Right: [subicy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(addi)                75%  ############################################################
instr(addicy)              75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [addi]
Right: [addicy]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
bitwise                   100%  ################################################################################
boolean                   100%  ################################################################################
carry                     100%  ################################################################################
logical                   100%  ################################################################################
or                        100%  ################################################################################
sub                       100%  ################################################################################
xor                       100%  ################################################################################
instr(mov)                 75%  ############################################################
data                        0%  
instr(add)                  0%  
instr(addcy)                0%  
instr(and)                  0%  
instr(or)                   0%  
instr(sub)                  0%  
instr(subcy)                0%  
instr(xor)                  0%  
trying splittag `add`...
Left: [mov]
Right: [subcat_tags_instrs(alu,[add,and,arith,bitwise,boolean,carry,data,logical,or,sub,xor],[add,sub,and,or,xor,addcy,subcy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(add)                 21%  #################
instr(addcy)               21%  #################
instr(and)                 21%  #################
instr(or)                  21%  #################
instr(sub)                 21%  #################
instr(subcy)               21%  #################
instr(xor)                 21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [and,or,xor]
Right: [add,sub,addcy,subcy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(and)                 50%  ########################################
instr(or)                  50%  ########################################
instr(xor)                 50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [or,xor]
Right: [and]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(or)                  75%  ############################################################
instr(xor)                 75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xor]
Right: [or]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(add)                 38%  ##############################
instr(addcy)               38%  ##############################
instr(sub)                 38%  ##############################
instr(subcy)               38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [sub,subcy]
Right: [add,addcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(sub)                 75%  ############################################################
instr(subcy)               75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [sub]
Right: [subcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(add)                 75%  ############################################################
instr(addcy)               75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [add]
Right: [addcy]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
bitwise                   100%  ################################################################################
boolean                   100%  ################################################################################
carry                     100%  ################################################################################
logical                   100%  ################################################################################
or                        100%  ################################################################################
sub                       100%  ################################################################################
xor                       100%  ################################################################################
instr(mov)                 75%  ############################################################
data                        0%  
instr(add)                  0%  
instr(addcy)                0%  
instr(and)                  0%  
instr(or)                   0%  
instr(sub)                  0%  
instr(subcy)                0%  
instr(xor)                  0%  
trying splittag `add`...
Left: [mov]
Right: [subcat_tags_instrs(alu,[add,and,arith,bitwise,boolean,carry,data,logical,or,sub,xor],[add,sub,and,or,xor,addcy,subcy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(add)                 21%  #################
instr(addcy)               21%  #################
instr(and)                 21%  #################
instr(or)                  21%  #################
instr(sub)                 21%  #################
instr(subcy)               21%  #################
instr(xor)                 21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [and,or,xor]
Right: [add,sub,addcy,subcy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(and)                 50%  ########################################
instr(or)                  50%  ########################################
instr(xor)                 50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [or,xor]
Right: [and]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(or)                  75%  ############################################################
instr(xor)                 75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xor]
Right: [or]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(add)                 38%  ##############################
instr(addcy)               38%  ##############################
instr(sub)                 38%  ##############################
instr(subcy)               38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [sub,subcy]
Right: [add,addcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(sub)                 75%  ############################################################
instr(subcy)               75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [sub]
Right: [subcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(add)                 75%  ############################################################
instr(addcy)               75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [add]
Right: [addcy]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
bitwise                   100%  ################################################################################
boolean                   100%  ################################################################################
carry                     100%  ################################################################################
logical                   100%  ################################################################################
or                        100%  ################################################################################
sub                       100%  ################################################################################
xor                       100%  ################################################################################
instr(mov)                 75%  ############################################################
data                        0%  
instr(add)                  0%  
instr(addcy)                0%  
instr(and)                  0%  
instr(or)                   0%  
instr(sub)                  0%  
instr(subcy)                0%  
instr(xor)                  0%  
trying splittag `add`...
Left: [mov]
Right: [subcat_tags_instrs(alu,[add,and,arith,bitwise,boolean,carry,data,logical,or,sub,xor],[add,sub,and,or,xor,addcy,subcy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(add)                 21%  #################
instr(addcy)               21%  #################
instr(and)                 21%  #################
instr(or)                  21%  #################
instr(sub)                 21%  #################
instr(subcy)               21%  #################
instr(xor)                 21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [and,or,xor]
Right: [add,sub,addcy,subcy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(and)                 50%  ########################################
instr(or)                  50%  ########################################
instr(xor)                 50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [or,xor]
Right: [and]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(or)                  75%  ############################################################
instr(xor)                 75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xor]
Right: [or]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(add)                 38%  ##############################
instr(addcy)               38%  ##############################
instr(sub)                 38%  ##############################
instr(subcy)               38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [sub,subcy]
Right: [add,addcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(sub)                 75%  ############################################################
instr(subcy)               75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [sub]
Right: [subcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(add)                 75%  ############################################################
instr(addcy)               75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [add]
Right: [addcy]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
bitwise                   100%  ################################################################################
boolean                   100%  ################################################################################
carry                     100%  ################################################################################
logical                   100%  ################################################################################
or                        100%  ################################################################################
sub                       100%  ################################################################################
xor                       100%  ################################################################################
instr(mov)                 75%  ############################################################
data                        0%  
instr(add)                  0%  
instr(addcy)                0%  
instr(and)                  0%  
instr(or)                   0%  
instr(sub)                  0%  
instr(subcy)                0%  
instr(xor)                  0%  
trying splittag `add`...
Left: [mov]
Right: [subcat_tags_instrs(alu,[add,and,arith,bitwise,boolean,carry,data,logical,or,sub,xor],[add,sub,and,or,xor,addcy,subcy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(add)                 21%  #################
instr(addcy)               21%  #################
instr(and)                 21%  #################
instr(or)                  21%  #################
instr(sub)                 21%  #################
instr(subcy)               21%  #################
instr(xor)                 21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [and,or,xor]
Right: [add,sub,addcy,subcy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(and)                 50%  ########################################
instr(or)                  50%  ########################################
instr(xor)                 50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [or,xor]
Right: [and]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(or)                  75%  ############################################################
instr(xor)                 75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xor]
Right: [or]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(add)                 38%  ##############################
instr(addcy)               38%  ##############################
instr(sub)                 38%  ##############################
instr(subcy)               38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [sub,subcy]
Right: [add,addcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(sub)                 75%  ############################################################
instr(subcy)               75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [sub]
Right: [subcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(add)                 75%  ############################################################
instr(addcy)               75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [add]
Right: [addcy]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
bitwise                   100%  ################################################################################
boolean                   100%  ################################################################################
carry                     100%  ################################################################################
logical                   100%  ################################################################################
or                        100%  ################################################################################
sub                       100%  ################################################################################
xor                       100%  ################################################################################
instr(mov)                 75%  ############################################################
data                        0%  
instr(add)                  0%  
instr(addcy)                0%  
instr(and)                  0%  
instr(or)                   0%  
instr(sub)                  0%  
instr(subcy)                0%  
instr(xor)                  0%  
trying splittag `add`...
Left: [mov]
Right: [subcat_tags_instrs(alu,[add,and,arith,bitwise,boolean,carry,data,logical,or,sub,xor],[add,sub,and,or,xor,addcy,subcy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(add)                 21%  #################
instr(addcy)               21%  #################
instr(and)                 21%  #################
instr(or)                  21%  #################
instr(sub)                 21%  #################
instr(subcy)               21%  #################
instr(xor)                 21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [and,or,xor]
Right: [add,sub,addcy,subcy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(and)                 50%  ########################################
instr(or)                  50%  ########################################
instr(xor)                 50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [or,xor]
Right: [and]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(or)                  75%  ############################################################
instr(xor)                 75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xor]
Right: [or]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(add)                 38%  ##############################
instr(addcy)               38%  ##############################
instr(sub)                 38%  ##############################
instr(subcy)               38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [sub,subcy]
Right: [add,addcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(sub)                 75%  ############################################################
instr(subcy)               75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [sub]
Right: [subcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(add)                 75%  ############################################################
instr(addcy)               75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [add]
Right: [addcy]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
bitwise                   100%  ################################################################################
boolean                   100%  ################################################################################
carry                     100%  ################################################################################
logical                   100%  ################################################################################
or                        100%  ################################################################################
sub                       100%  ################################################################################
xor                       100%  ################################################################################
instr(mov)                 75%  ############################################################
data                        0%  
instr(add)                  0%  
instr(addcy)                0%  
instr(and)                  0%  
instr(or)                   0%  
instr(sub)                  0%  
instr(subcy)                0%  
instr(xor)                  0%  
trying splittag `add`...
Left: [mov]
Right: [subcat_tags_instrs(alu,[add,and,arith,bitwise,boolean,carry,data,logical,or,sub,xor],[add,sub,and,or,xor,addcy,subcy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(add)                 21%  #################
instr(addcy)               21%  #################
instr(and)                 21%  #################
instr(or)                  21%  #################
instr(sub)                 21%  #################
instr(subcy)               21%  #################
instr(xor)                 21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [and,or,xor]
Right: [add,sub,addcy,subcy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(and)                 50%  ########################################
instr(or)                  50%  ########################################
instr(xor)                 50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [or,xor]
Right: [and]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(or)                  75%  ############################################################
instr(xor)                 75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xor]
Right: [or]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(add)                 38%  ##############################
instr(addcy)               38%  ##############################
instr(sub)                 38%  ##############################
instr(subcy)               38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [sub,subcy]
Right: [add,addcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(sub)                 75%  ############################################################
instr(subcy)               75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [sub]
Right: [subcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(add)                 75%  ############################################################
instr(addcy)               75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [add]
Right: [addcy]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
bitwise                   100%  ################################################################################
boolean                   100%  ################################################################################
carry                     100%  ################################################################################
logical                   100%  ################################################################################
or                        100%  ################################################################################
sub                       100%  ################################################################################
xor                       100%  ################################################################################
instr(mov)                 75%  ############################################################
data                        0%  
instr(add)                  0%  
instr(addcy)                0%  
instr(and)                  0%  
instr(or)                   0%  
instr(sub)                  0%  
instr(subcy)                0%  
instr(xor)                  0%  
trying splittag `add`...
Left: [mov]
Right: [subcat_tags_instrs(alu,[add,and,arith,bitwise,boolean,carry,data,logical,or,sub,xor],[add,sub,and,or,xor,addcy,subcy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(add)                 21%  #################
instr(addcy)               21%  #################
instr(and)                 21%  #################
instr(or)                  21%  #################
instr(sub)                 21%  #################
instr(subcy)               21%  #################
instr(xor)                 21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [and,or,xor]
Right: [add,sub,addcy,subcy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(and)                 50%  ########################################
instr(or)                  50%  ########################################
instr(xor)                 50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [or,xor]
Right: [and]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(or)                  75%  ############################################################
instr(xor)                 75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xor]
Right: [or]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(add)                 38%  ##############################
instr(addcy)               38%  ##############################
instr(sub)                 38%  ##############################
instr(subcy)               38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [sub,subcy]
Right: [add,addcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(sub)                 75%  ############################################################
instr(subcy)               75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [sub]
Right: [subcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(add)                 75%  ############################################################
instr(addcy)               75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [add]
Right: [addcy]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
and                       100%  ################################################################################
arith                     100%  ################################################################################
bitwise                   100%  ################################################################################
boolean                   100%  ################################################################################
carry                     100%  ################################################################################
logical                   100%  ################################################################################
or                        100%  ################################################################################
sub                       100%  ################################################################################
xor                       100%  ################################################################################
instr(mov)                 75%  ############################################################
data                        0%  
instr(add)                  0%  
instr(addcy)                0%  
instr(and)                  0%  
instr(or)                   0%  
instr(sub)                  0%  
instr(subcy)                0%  
instr(xor)                  0%  
trying splittag `add`...
Left: [mov]
Right: [subcat_tags_instrs(alu,[add,and,arith,bitwise,boolean,carry,data,logical,or,sub,xor],[add,sub,and,or,xor,addcy,subcy])]

--------------------------------------------------------------------------------
arith                      86%  #####################################################################
bitwise                    86%  #####################################################################
boolean                    86%  #####################################################################
logical                    86%  #####################################################################
add                        57%  ##############################################
carry                      57%  ##############################################
sub                        57%  ##############################################
and                        29%  #######################
or                         29%  #######################
xor                        29%  #######################
instr(add)                 21%  #################
instr(addcy)               21%  #################
instr(and)                 21%  #################
instr(or)                  21%  #################
instr(sub)                 21%  #################
instr(subcy)               21%  #################
instr(xor)                 21%  #################
aligned_subcat(alu)         0%  
trying splittag `arith`...
Left: [and,or,xor]
Right: [add,sub,addcy,subcy]

--------------------------------------------------------------------------------
and                        67%  #####################################################
or                         67%  #####################################################
xor                        67%  #####################################################
instr(and)                 50%  ########################################
instr(or)                  50%  ########################################
instr(xor)                 50%  ########################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `and`...
Left: [or,xor]
Right: [and]

--------------------------------------------------------------------------------
or                        100%  ################################################################################
xor                       100%  ################################################################################
instr(or)                  75%  ############################################################
instr(xor)                 75%  ############################################################
bitwise                     0%  
boolean                     0%  
logical                     0%  
aligned_subcat(alu)         0%  
trying splittag `or`...
Left: [xor]
Right: [or]

--------------------------------------------------------------------------------
add                       100%  ################################################################################
carry                     100%  ################################################################################
sub                       100%  ################################################################################
instr(add)                 38%  ##############################
instr(addcy)               38%  ##############################
instr(sub)                 38%  ##############################
instr(subcy)               38%  ##############################
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `add`...
Left: [sub,subcy]
Right: [add,addcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(sub)                 75%  ############################################################
instr(subcy)               75%  ############################################################
arith                       0%  
sub                         0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [sub]
Right: [subcy]

--------------------------------------------------------------------------------
carry                     100%  ################################################################################
instr(add)                 75%  ############################################################
instr(addcy)               75%  ############################################################
add                         0%  
arith                       0%  
aligned_subcat(alu)         0%  
trying splittag `carry`...
Left: [add]
Right: [addcy]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tae)                 38%  ##############################
instr(tb)                  38%  ##############################
instr(tge)                 38%  ##############################
instr(tl)                  38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tge,tae]
Right: [tl,tb]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tae)                 75%  ############################################################
instr(tge)                 75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tae]
Right: [tge]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tb)                  75%  ############################################################
instr(tl)                  75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tb]
Right: [tl]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tae)                 38%  ##############################
instr(tb)                  38%  ##############################
instr(tge)                 38%  ##############################
instr(tl)                  38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tge,tae]
Right: [tl,tb]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tae)                 75%  ############################################################
instr(tge)                 75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tae]
Right: [tge]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tb)                  75%  ############################################################
instr(tl)                  75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tb]
Right: [tl]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tae)                 38%  ##############################
instr(tb)                  38%  ##############################
instr(tge)                 38%  ##############################
instr(tl)                  38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tge,tae]
Right: [tl,tb]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tae)                 75%  ############################################################
instr(tge)                 75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tae]
Right: [tge]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tb)                  75%  ############################################################
instr(tl)                  75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tb]
Right: [tl]

--------------------------------------------------------------------------------
<                         100%  ################################################################################
>=                        100%  ################################################################################
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tae)                 38%  ##############################
instr(tb)                  38%  ##############################
instr(tge)                 38%  ##############################
instr(tl)                  38%  ##############################
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `<`...
Left: [tge,tae]
Right: [tl,tb]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tae)                 75%  ############################################################
instr(tge)                 75%  ############################################################
>=                          0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tae]
Right: [tge]

--------------------------------------------------------------------------------
signed                    100%  ################################################################################
unsigned                  100%  ################################################################################
instr(tb)                  75%  ############################################################
instr(tl)                  75%  ############################################################
<                           0%  
cmp                         0%  
inequality                  0%  
ts                          0%  
trying splittag `signed`...
Left: [tb]
Right: [tl]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teq)                 75%  ############################################################
instr(tne)                 75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teq]
Right: [tne]

--------------------------------------------------------------------------------
not                       100%  ################################################################################
instr(teq)                 75%  ############################################################
instr(tne)                 75%  ############################################################
cmp                         0%  
equality                    0%  
ts                          0%  
trying splittag `not`...
Left: [teq]
Right: [tne]

--------------------------------------------------------------------------------
sp                        100%  ################################################################################
arith                      50%  ########################################
byte                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
pc                         50%  ########################################
pop                        50%  ########################################
push                       50%  ########################################
word                       50%  ########################################
ra                         25%  ####################
sxt                        25%  ####################
instr(callr)               19%  ###############
instr(jr)                  19%  ###############
instr(neg)                 19%  ###############
instr(popb)                19%  ###############
instr(popw)                19%  ###############
instr(pushb)               19%  ###############
instr(pushw)               19%  ###############
instr(seb)                 19%  ###############
trying splittag `sp`...
Left: [callr,jr,neg,seb]
Right: [pushb,pushw,popb,popw]

--------------------------------------------------------------------------------
arith                     100%  ################################################################################
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
pc                        100%  ################################################################################
ra                         50%  ########################################
sxt                        50%  ########################################
instr(callr)               38%  ##############################
instr(jr)                  38%  ##############################
instr(neg)                 38%  ##############################
instr(seb)                 38%  ##############################
trying splittag `arith`...
Left: [callr,jr]
Right: [neg,seb]

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
instr(callr)               75%  ############################################################
instr(jr)                  75%  ############################################################
indirect                    0%  
jump                        0%  
pc                          0%  
trying splittag `ra`...
Left: [jr]
Right: [callr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(neg)                 75%  ############################################################
instr(seb)                 75%  ############################################################
arith                       0%  
trying splittag `sxt`...
Left: [neg]
Right: [seb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
pop                       100%  ################################################################################
push                      100%  ################################################################################
word                      100%  ################################################################################
instr(popb)                38%  ##############################
instr(popw)                38%  ##############################
instr(pushb)               38%  ##############################
instr(pushw)               38%  ##############################
sp                          0%  
trying splittag `byte`...
Left: [pushw,popw]
Right: [pushb,popb]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popw)                75%  ############################################################
instr(pushw)               75%  ############################################################
sp                          0%  
word                        0%  
trying splittag `pop`...
Left: [pushw]
Right: [popw]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popb)                75%  ############################################################
instr(pushb)               75%  ############################################################
byte                        0%  
sp                          0%  
trying splittag `pop`...
Left: [pushb]
Right: [popb]

--------------------------------------------------------------------------------
sp                        100%  ################################################################################
arith                      50%  ########################################
byte                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
pc                         50%  ########################################
pop                        50%  ########################################
push                       50%  ########################################
word                       50%  ########################################
ra                         25%  ####################
sxt                        25%  ####################
instr(callr)               19%  ###############
instr(jr)                  19%  ###############
instr(neg)                 19%  ###############
instr(popb)                19%  ###############
instr(popw)                19%  ###############
instr(pushb)               19%  ###############
instr(pushw)               19%  ###############
instr(seb)                 19%  ###############
trying splittag `sp`...
Left: [callr,jr,neg,seb]
Right: [pushb,pushw,popb,popw]

--------------------------------------------------------------------------------
arith                     100%  ################################################################################
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
pc                        100%  ################################################################################
ra                         50%  ########################################
sxt                        50%  ########################################
instr(callr)               38%  ##############################
instr(jr)                  38%  ##############################
instr(neg)                 38%  ##############################
instr(seb)                 38%  ##############################
trying splittag `arith`...
Left: [callr,jr]
Right: [neg,seb]

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
instr(callr)               75%  ############################################################
instr(jr)                  75%  ############################################################
indirect                    0%  
jump                        0%  
pc                          0%  
trying splittag `ra`...
Left: [jr]
Right: [callr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(neg)                 75%  ############################################################
instr(seb)                 75%  ############################################################
arith                       0%  
trying splittag `sxt`...
Left: [neg]
Right: [seb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
pop                       100%  ################################################################################
push                      100%  ################################################################################
word                      100%  ################################################################################
instr(popb)                38%  ##############################
instr(popw)                38%  ##############################
instr(pushb)               38%  ##############################
instr(pushw)               38%  ##############################
sp                          0%  
trying splittag `byte`...
Left: [pushw,popw]
Right: [pushb,popb]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popw)                75%  ############################################################
instr(pushw)               75%  ############################################################
sp                          0%  
word                        0%  
trying splittag `pop`...
Left: [pushw]
Right: [popw]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popb)                75%  ############################################################
instr(pushb)               75%  ############################################################
byte                        0%  
sp                          0%  
trying splittag `pop`...
Left: [pushb]
Right: [popb]

--------------------------------------------------------------------------------
sp                        100%  ################################################################################
arith                      50%  ########################################
byte                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
pc                         50%  ########################################
pop                        50%  ########################################
push                       50%  ########################################
word                       50%  ########################################
ra                         25%  ####################
sxt                        25%  ####################
instr(callr)               19%  ###############
instr(jr)                  19%  ###############
instr(neg)                 19%  ###############
instr(popb)                19%  ###############
instr(popw)                19%  ###############
instr(pushb)               19%  ###############
instr(pushw)               19%  ###############
instr(seb)                 19%  ###############
trying splittag `sp`...
Left: [callr,jr,neg,seb]
Right: [pushb,pushw,popb,popw]

--------------------------------------------------------------------------------
arith                     100%  ################################################################################
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
pc                        100%  ################################################################################
ra                         50%  ########################################
sxt                        50%  ########################################
instr(callr)               38%  ##############################
instr(jr)                  38%  ##############################
instr(neg)                 38%  ##############################
instr(seb)                 38%  ##############################
trying splittag `arith`...
Left: [callr,jr]
Right: [neg,seb]

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
instr(callr)               75%  ############################################################
instr(jr)                  75%  ############################################################
indirect                    0%  
jump                        0%  
pc                          0%  
trying splittag `ra`...
Left: [jr]
Right: [callr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(neg)                 75%  ############################################################
instr(seb)                 75%  ############################################################
arith                       0%  
trying splittag `sxt`...
Left: [neg]
Right: [seb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
pop                       100%  ################################################################################
push                      100%  ################################################################################
word                      100%  ################################################################################
instr(popb)                38%  ##############################
instr(popw)                38%  ##############################
instr(pushb)               38%  ##############################
instr(pushw)               38%  ##############################
sp                          0%  
trying splittag `byte`...
Left: [pushw,popw]
Right: [pushb,popb]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popw)                75%  ############################################################
instr(pushw)               75%  ############################################################
sp                          0%  
word                        0%  
trying splittag `pop`...
Left: [pushw]
Right: [popw]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popb)                75%  ############################################################
instr(pushb)               75%  ############################################################
byte                        0%  
sp                          0%  
trying splittag `pop`...
Left: [pushb]
Right: [popb]

--------------------------------------------------------------------------------
sp                        100%  ################################################################################
arith                      50%  ########################################
byte                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
pc                         50%  ########################################
pop                        50%  ########################################
push                       50%  ########################################
word                       50%  ########################################
ra                         25%  ####################
sxt                        25%  ####################
instr(callr)               19%  ###############
instr(jr)                  19%  ###############
instr(neg)                 19%  ###############
instr(popb)                19%  ###############
instr(popw)                19%  ###############
instr(pushb)               19%  ###############
instr(pushw)               19%  ###############
instr(seb)                 19%  ###############
trying splittag `sp`...
Left: [callr,jr,neg,seb]
Right: [pushb,pushw,popb,popw]

--------------------------------------------------------------------------------
arith                     100%  ################################################################################
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
pc                        100%  ################################################################################
ra                         50%  ########################################
sxt                        50%  ########################################
instr(callr)               38%  ##############################
instr(jr)                  38%  ##############################
instr(neg)                 38%  ##############################
instr(seb)                 38%  ##############################
trying splittag `arith`...
Left: [callr,jr]
Right: [neg,seb]

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
instr(callr)               75%  ############################################################
instr(jr)                  75%  ############################################################
indirect                    0%  
jump                        0%  
pc                          0%  
trying splittag `ra`...
Left: [jr]
Right: [callr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(neg)                 75%  ############################################################
instr(seb)                 75%  ############################################################
arith                       0%  
trying splittag `sxt`...
Left: [neg]
Right: [seb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
pop                       100%  ################################################################################
push                      100%  ################################################################################
word                      100%  ################################################################################
instr(popb)                38%  ##############################
instr(popw)                38%  ##############################
instr(pushb)               38%  ##############################
instr(pushw)               38%  ##############################
sp                          0%  
trying splittag `byte`...
Left: [pushw,popw]
Right: [pushb,popb]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popw)                75%  ############################################################
instr(pushw)               75%  ############################################################
sp                          0%  
word                        0%  
trying splittag `pop`...
Left: [pushw]
Right: [popw]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popb)                75%  ############################################################
instr(pushb)               75%  ############################################################
byte                        0%  
sp                          0%  
trying splittag `pop`...
Left: [pushb]
Right: [popb]

--------------------------------------------------------------------------------
sp                        100%  ################################################################################
arith                      50%  ########################################
byte                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
pc                         50%  ########################################
pop                        50%  ########################################
push                       50%  ########################################
word                       50%  ########################################
ra                         25%  ####################
sxt                        25%  ####################
instr(callr)               19%  ###############
instr(jr)                  19%  ###############
instr(neg)                 19%  ###############
instr(popb)                19%  ###############
instr(popw)                19%  ###############
instr(pushb)               19%  ###############
instr(pushw)               19%  ###############
instr(seb)                 19%  ###############
trying splittag `sp`...
Left: [callr,jr,neg,seb]
Right: [pushb,pushw,popb,popw]

--------------------------------------------------------------------------------
arith                     100%  ################################################################################
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
pc                        100%  ################################################################################
ra                         50%  ########################################
sxt                        50%  ########################################
instr(callr)               38%  ##############################
instr(jr)                  38%  ##############################
instr(neg)                 38%  ##############################
instr(seb)                 38%  ##############################
trying splittag `arith`...
Left: [callr,jr]
Right: [neg,seb]

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
instr(callr)               75%  ############################################################
instr(jr)                  75%  ############################################################
indirect                    0%  
jump                        0%  
pc                          0%  
trying splittag `ra`...
Left: [jr]
Right: [callr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(neg)                 75%  ############################################################
instr(seb)                 75%  ############################################################
arith                       0%  
trying splittag `sxt`...
Left: [neg]
Right: [seb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
pop                       100%  ################################################################################
push                      100%  ################################################################################
word                      100%  ################################################################################
instr(popb)                38%  ##############################
instr(popw)                38%  ##############################
instr(pushb)               38%  ##############################
instr(pushw)               38%  ##############################
sp                          0%  
trying splittag `byte`...
Left: [pushw,popw]
Right: [pushb,popb]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popw)                75%  ############################################################
instr(pushw)               75%  ############################################################
sp                          0%  
word                        0%  
trying splittag `pop`...
Left: [pushw]
Right: [popw]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popb)                75%  ############################################################
instr(pushb)               75%  ############################################################
byte                        0%  
sp                          0%  
trying splittag `pop`...
Left: [pushb]
Right: [popb]

--------------------------------------------------------------------------------
sp                        100%  ################################################################################
arith                      50%  ########################################
byte                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
pc                         50%  ########################################
pop                        50%  ########################################
push                       50%  ########################################
word                       50%  ########################################
ra                         25%  ####################
sxt                        25%  ####################
instr(callr)               19%  ###############
instr(jr)                  19%  ###############
instr(neg)                 19%  ###############
instr(popb)                19%  ###############
instr(popw)                19%  ###############
instr(pushb)               19%  ###############
instr(pushw)               19%  ###############
instr(seb)                 19%  ###############
trying splittag `sp`...
Left: [callr,jr,neg,seb]
Right: [pushb,pushw,popb,popw]

--------------------------------------------------------------------------------
arith                     100%  ################################################################################
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
pc                        100%  ################################################################################
ra                         50%  ########################################
sxt                        50%  ########################################
instr(callr)               38%  ##############################
instr(jr)                  38%  ##############################
instr(neg)                 38%  ##############################
instr(seb)                 38%  ##############################
trying splittag `arith`...
Left: [callr,jr]
Right: [neg,seb]

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
instr(callr)               75%  ############################################################
instr(jr)                  75%  ############################################################
indirect                    0%  
jump                        0%  
pc                          0%  
trying splittag `ra`...
Left: [jr]
Right: [callr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(neg)                 75%  ############################################################
instr(seb)                 75%  ############################################################
arith                       0%  
trying splittag `sxt`...
Left: [neg]
Right: [seb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
pop                       100%  ################################################################################
push                      100%  ################################################################################
word                      100%  ################################################################################
instr(popb)                38%  ##############################
instr(popw)                38%  ##############################
instr(pushb)               38%  ##############################
instr(pushw)               38%  ##############################
sp                          0%  
trying splittag `byte`...
Left: [pushw,popw]
Right: [pushb,popb]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popw)                75%  ############################################################
instr(pushw)               75%  ############################################################
sp                          0%  
word                        0%  
trying splittag `pop`...
Left: [pushw]
Right: [popw]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popb)                75%  ############################################################
instr(pushb)               75%  ############################################################
byte                        0%  
sp                          0%  
trying splittag `pop`...
Left: [pushb]
Right: [popb]

--------------------------------------------------------------------------------
sp                        100%  ################################################################################
arith                      50%  ########################################
byte                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
pc                         50%  ########################################
pop                        50%  ########################################
push                       50%  ########################################
word                       50%  ########################################
ra                         25%  ####################
sxt                        25%  ####################
instr(callr)               19%  ###############
instr(jr)                  19%  ###############
instr(neg)                 19%  ###############
instr(popb)                19%  ###############
instr(popw)                19%  ###############
instr(pushb)               19%  ###############
instr(pushw)               19%  ###############
instr(seb)                 19%  ###############
trying splittag `sp`...
Left: [callr,jr,neg,seb]
Right: [pushb,pushw,popb,popw]

--------------------------------------------------------------------------------
arith                     100%  ################################################################################
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
pc                        100%  ################################################################################
ra                         50%  ########################################
sxt                        50%  ########################################
instr(callr)               38%  ##############################
instr(jr)                  38%  ##############################
instr(neg)                 38%  ##############################
instr(seb)                 38%  ##############################
trying splittag `arith`...
Left: [callr,jr]
Right: [neg,seb]

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
instr(callr)               75%  ############################################################
instr(jr)                  75%  ############################################################
indirect                    0%  
jump                        0%  
pc                          0%  
trying splittag `ra`...
Left: [jr]
Right: [callr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(neg)                 75%  ############################################################
instr(seb)                 75%  ############################################################
arith                       0%  
trying splittag `sxt`...
Left: [neg]
Right: [seb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
pop                       100%  ################################################################################
push                      100%  ################################################################################
word                      100%  ################################################################################
instr(popb)                38%  ##############################
instr(popw)                38%  ##############################
instr(pushb)               38%  ##############################
instr(pushw)               38%  ##############################
sp                          0%  
trying splittag `byte`...
Left: [pushw,popw]
Right: [pushb,popb]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popw)                75%  ############################################################
instr(pushw)               75%  ############################################################
sp                          0%  
word                        0%  
trying splittag `pop`...
Left: [pushw]
Right: [popw]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popb)                75%  ############################################################
instr(pushb)               75%  ############################################################
byte                        0%  
sp                          0%  
trying splittag `pop`...
Left: [pushb]
Right: [popb]

--------------------------------------------------------------------------------
sp                        100%  ################################################################################
arith                      50%  ########################################
byte                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
pc                         50%  ########################################
pop                        50%  ########################################
push                       50%  ########################################
word                       50%  ########################################
ra                         25%  ####################
sxt                        25%  ####################
instr(callr)               19%  ###############
instr(jr)                  19%  ###############
instr(neg)                 19%  ###############
instr(popb)                19%  ###############
instr(popw)                19%  ###############
instr(pushb)               19%  ###############
instr(pushw)               19%  ###############
instr(seb)                 19%  ###############
trying splittag `sp`...
Left: [callr,jr,neg,seb]
Right: [pushb,pushw,popb,popw]

--------------------------------------------------------------------------------
arith                     100%  ################################################################################
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
pc                        100%  ################################################################################
ra                         50%  ########################################
sxt                        50%  ########################################
instr(callr)               38%  ##############################
instr(jr)                  38%  ##############################
instr(neg)                 38%  ##############################
instr(seb)                 38%  ##############################
trying splittag `arith`...
Left: [callr,jr]
Right: [neg,seb]

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
instr(callr)               75%  ############################################################
instr(jr)                  75%  ############################################################
indirect                    0%  
jump                        0%  
pc                          0%  
trying splittag `ra`...
Left: [jr]
Right: [callr]

--------------------------------------------------------------------------------
sxt                       100%  ################################################################################
instr(neg)                 75%  ############################################################
instr(seb)                 75%  ############################################################
arith                       0%  
trying splittag `sxt`...
Left: [neg]
Right: [seb]

--------------------------------------------------------------------------------
byte                      100%  ################################################################################
pop                       100%  ################################################################################
push                      100%  ################################################################################
word                      100%  ################################################################################
instr(popb)                38%  ##############################
instr(popw)                38%  ##############################
instr(pushb)               38%  ##############################
instr(pushw)               38%  ##############################
sp                          0%  
trying splittag `byte`...
Left: [pushw,popw]
Right: [pushb,popb]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popw)                75%  ############################################################
instr(pushw)               75%  ############################################################
sp                          0%  
word                        0%  
trying splittag `pop`...
Left: [pushw]
Right: [popw]

--------------------------------------------------------------------------------
pop                       100%  ################################################################################
push                      100%  ################################################################################
instr(popb)                75%  ############################################################
instr(pushb)               75%  ############################################################
byte                        0%  
sp                          0%  
trying splittag `pop`...
Left: [pushb]
Right: [popb]

--------------------------------------------------------------------------------
gp                        100%  ################################################################################
mp                        100%  ################################################################################
hi                         50%  ########################################
lo                         50%  ########################################
rd                         50%  ########################################
wr                         50%  ########################################
instr('rd.gp')             38%  ##############################
instr('rd.mp.hi')          38%  ##############################
instr('rd.mp.lo')          38%  ##############################
instr('wr.gp')             38%  ##############################
data                        0%  
trying splittag `gp`...
Left: ['rd.mp.lo','rd.mp.hi']
Right: ['rd.gp','wr.gp']

--------------------------------------------------------------------------------
hi                        100%  ################################################################################
lo                        100%  ################################################################################
instr('rd.mp.hi')          75%  ############################################################
instr('rd.mp.lo')          75%  ############################################################
data                        0%  
mp                          0%  
rd                          0%  
trying splittag `hi`...
Left: ['rd.mp.lo']
Right: ['rd.mp.hi']

--------------------------------------------------------------------------------
rd                        100%  ################################################################################
wr                        100%  ################################################################################
instr('rd.gp')             75%  ############################################################
instr('wr.gp')             75%  ############################################################
data                        0%  
gp                          0%  
trying splittag `rd`...
Left: ['wr.gp']
Right: ['rd.gp']

--------------------------------------------------------------------------------
gp                        100%  ################################################################################
mp                        100%  ################################################################################
hi                         50%  ########################################
lo                         50%  ########################################
rd                         50%  ########################################
wr                         50%  ########################################
instr('rd.gp')             38%  ##############################
instr('rd.mp.hi')          38%  ##############################
instr('rd.mp.lo')          38%  ##############################
instr('wr.gp')             38%  ##############################
data                        0%  
trying splittag `gp`...
Left: ['rd.mp.lo','rd.mp.hi']
Right: ['rd.gp','wr.gp']

--------------------------------------------------------------------------------
hi                        100%  ################################################################################
lo                        100%  ################################################################################
instr('rd.mp.hi')          75%  ############################################################
instr('rd.mp.lo')          75%  ############################################################
data                        0%  
mp                          0%  
rd                          0%  
trying splittag `hi`...
Left: ['rd.mp.lo']
Right: ['rd.mp.hi']

--------------------------------------------------------------------------------
rd                        100%  ################################################################################
wr                        100%  ################################################################################
instr('rd.gp')             75%  ############################################################
instr('wr.gp')             75%  ############################################################
data                        0%  
gp                          0%  
trying splittag `rd`...
Left: ['wr.gp']
Right: ['rd.gp']

--------------------------------------------------------------------------------
gp                        100%  ################################################################################
mp                        100%  ################################################################################
hi                         50%  ########################################
lo                         50%  ########################################
rd                         50%  ########################################
wr                         50%  ########################################
instr('rd.gp')             38%  ##############################
instr('rd.mp.hi')          38%  ##############################
instr('rd.mp.lo')          38%  ##############################
instr('wr.gp')             38%  ##############################
data                        0%  
trying splittag `gp`...
Left: ['rd.mp.lo','rd.mp.hi']
Right: ['rd.gp','wr.gp']

--------------------------------------------------------------------------------
hi                        100%  ################################################################################
lo                        100%  ################################################################################
instr('rd.mp.hi')          75%  ############################################################
instr('rd.mp.lo')          75%  ############################################################
data                        0%  
mp                          0%  
rd                          0%  
trying splittag `hi`...
Left: ['rd.mp.lo']
Right: ['rd.mp.hi']

--------------------------------------------------------------------------------
rd                        100%  ################################################################################
wr                        100%  ################################################################################
instr('rd.gp')             75%  ############################################################
instr('wr.gp')             75%  ############################################################
data                        0%  
gp                          0%  
trying splittag `rd`...
Left: ['wr.gp']
Right: ['rd.gp']

--------------------------------------------------------------------------------
gp                        100%  ################################################################################
mp                        100%  ################################################################################
hi                         50%  ########################################
lo                         50%  ########################################
rd                         50%  ########################################
wr                         50%  ########################################
instr('rd.gp')             38%  ##############################
instr('rd.mp.hi')          38%  ##############################
instr('rd.mp.lo')          38%  ##############################
instr('wr.gp')             38%  ##############################
data                        0%  
trying splittag `gp`...
Left: ['rd.mp.lo','rd.mp.hi']
Right: ['rd.gp','wr.gp']

--------------------------------------------------------------------------------
hi                        100%  ################################################################################
lo                        100%  ################################################################################
instr('rd.mp.hi')          75%  ############################################################
instr('rd.mp.lo')          75%  ############################################################
data                        0%  
mp                          0%  
rd                          0%  
trying splittag `hi`...
Left: ['rd.mp.lo']
Right: ['rd.mp.hi']

--------------------------------------------------------------------------------
rd                        100%  ################################################################################
wr                        100%  ################################################################################
instr('rd.gp')             75%  ############################################################
instr('wr.gp')             75%  ############################################################
data                        0%  
gp                          0%  
trying splittag `rd`...
Left: ['wr.gp']
Right: ['rd.gp']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

--------------------------------------------------------------------------------
prsv_rstr                  71%  #########################################################
sp                         71%  #########################################################
ts                         71%  #########################################################
cc                         36%  #############################
prsv                       36%  #############################
rstr                       36%  #############################
pc                         29%  #######################
boolean                    21%  #################
cy                         21%  #################
ra                         21%  #################
dbg                        14%  ###########
exc                        14%  ###########
gp                         14%  ###########
kernel                     14%  ###########
kr                         14%  ###########
mp                         14%  ###########
push                       14%  ###########
ret                        14%  ###########
wr                         14%  ###########
call                        7%  ######
data                        7%  ######
indirect                    7%  ######
interrupts                  7%  ######
jump                        7%  ######
ov                          7%  ######
security                    7%  ######
sleep                       7%  ######
instr('BREAK')              5%  ####
instr('NONEXE0')            5%  ####
instr('UNIMPL')             5%  ####
instr('clr.cy')             5%  ####
instr(kcall)                5%  ####
instr(kret)                 5%  ####
instr('prsv.cc')            5%  ####
instr('prsv.gp')            5%  ####
instr('prsv.mp')            5%  ####
instr('prsv.ra')            5%  ####
instr('prsv.ts')            5%  ####
instr(ret)                  5%  ####
instr('rstr.cc')            5%  ####
instr('rstr.gp')            5%  ####
instr('rstr.mp')            5%  ####
instr('rstr.ra')            5%  ####
instr('rstr.ts')            5%  ####
instr('set.cy')             5%  ####
instr(sleep)                5%  ####
instr(tand)                 5%  ####
instr(tcy)                  5%  ####
instr(tdup)                 5%  ####
instr(tnot)                 5%  ####
instr(tor)                  5%  ####
instr(tov)                  5%  ####
instr(tpush0)               5%  ####
instr(tpush1)               5%  ####
instr(vijt)                 5%  ####
trying splittag `prsv_rstr`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,tov,tcy,'clr.cy','set.cy',tpush0,tpush1,tnot,tand,tor,tdup,sleep,vijt]
Right: ['prsv.mp','rstr.mp','prsv.ts','rstr.ts','prsv.ra','rstr.ra','prsv.gp','rstr.gp','prsv.cc','rstr.cc']

--------------------------------------------------------------------------------
ts                         89%  #######################################################################
pc                         44%  ####################################
boolean                    33%  ###########################
cc                         33%  ###########################
cy                         33%  ###########################
dbg                        22%  ##################
exc                        22%  ##################
kernel                     22%  ##################
kr                         22%  ##################
push                       22%  ##################
ret                        22%  ##################
wr                         22%  ##################
call                       11%  #########
data                       11%  #########
indirect                   11%  #########
interrupts                 11%  #########
jump                       11%  #########
ov                         11%  #########
ra                         11%  #########
security                   11%  #########
sleep                      11%  #########
instr('BREAK')              8%  #######
instr('NONEXE0')            8%  #######
instr('UNIMPL')             8%  #######
instr('clr.cy')             8%  #######
instr(kcall)                8%  #######
instr(kret)                 8%  #######
instr(ret)                  8%  #######
instr('set.cy')             8%  #######
instr(sleep)                8%  #######
instr(tand)                 8%  #######
instr(tcy)                  8%  #######
instr(tdup)                 8%  #######
instr(tnot)                 8%  #######
instr(tor)                  8%  #######
instr(tov)                  8%  #######
instr(tpush0)               8%  #######
instr(tpush1)               8%  #######
instr(vijt)                 8%  #######
trying splittag `ts`...
Left: ['NONEXE0','UNIMPL','BREAK',kret,kcall,ret,'clr.cy','set.cy',sleep,vijt]
Right: [tov,tcy,tpush0,tpush1,tnot,tand,tor,tdup]

--------------------------------------------------------------------------------
pc                         80%  ################################################################
cy                         40%  ################################
dbg                        40%  ################################
exc                        40%  ################################
kernel                     40%  ################################
kr                         40%  ################################
ret                        40%  ################################
wr                         40%  ################################
call                       20%  ################
cc                         20%  ################
indirect                   20%  ################
interrupts                 20%  ################
jump                       20%  ################
ra                         20%  ################
security                   20%  ################
sleep                      20%  ################
instr('BREAK')             15%  ############
instr('NONEXE0')           15%  ############
instr('UNIMPL')            15%  ############
instr('clr.cy')            15%  ############
instr(kcall)               15%  ############
instr(kret)                15%  ############
instr(ret)                 15%  ############
instr('set.cy')            15%  ############
instr(sleep)               15%  ############
instr(vijt)                15%  ############
trying splittag `pc`...
Left: ['NONEXE0','UNIMPL','BREAK','clr.cy','set.cy',sleep]
Right: [kret,kcall,ret,vijt]

--------------------------------------------------------------------------------
cy                         67%  #####################################################
dbg                        67%  #####################################################
exc                        67%  #####################################################
wr                         67%  #####################################################
cc                         33%  ###########################
interrupts                 33%  ###########################
sleep                      33%  ###########################
instr('BREAK')             25%  ####################
instr('NONEXE0')           25%  ####################
instr('UNIMPL')            25%  ####################
instr('clr.cy')            25%  ####################
instr('set.cy')            25%  ####################
instr(sleep)               25%  ####################
trying splittag `cy`...
Left: ['NONEXE0','UNIMPL','BREAK',sleep]
Right: ['clr.cy','set.cy']

--------------------------------------------------------------------------------
dbg                       100%  ################################################################################
exc                       100%  ################################################################################
cc                         50%  ########################################
interrupts                 50%  ########################################
sleep                      50%  ########################################
instr('BREAK')             38%  ##############################
instr('NONEXE0')           38%  ##############################
instr('UNIMPL')            38%  ##############################
instr(sleep)               38%  ##############################
trying splittag `dbg`...
Left: ['NONEXE0',sleep]
Right: ['UNIMPL','BREAK']

--------------------------------------------------------------------------------
cc                        100%  ################################################################################
interrupts                100%  ################################################################################
sleep                     100%  ################################################################################
instr('NONEXE0')           75%  ############################################################
instr(sleep)               75%  ############################################################
trying splittag `cc`...
Left: ['NONEXE0']
Right: [sleep]

--------------------------------------------------------------------------------
instr('BREAK')             75%  ############################################################
instr('UNIMPL')            75%  ############################################################
dbg                         0%  
exc                         0%  
trying splittag `instr('BREAK')`...
Left: ['UNIMPL']
Right: ['BREAK']

--------------------------------------------------------------------------------
instr('clr.cy')            75%  ############################################################
instr('set.cy')            75%  ############################################################
cy                          0%  
wr                          0%  
trying splittag `instr('clr.cy')`...
Left: ['set.cy']
Right: ['clr.cy']

--------------------------------------------------------------------------------
kernel                    100%  ################################################################################
kr                        100%  ################################################################################
ret                       100%  ################################################################################
call                       50%  ########################################
indirect                   50%  ########################################
jump                       50%  ########################################
ra                         50%  ########################################
security                   50%  ########################################
instr(kcall)               38%  ##############################
instr(kret)                38%  ##############################
instr(ret)                 38%  ##############################
instr(vijt)                38%  ##############################
pc                          0%  
trying splittag `kernel`...
Left: [ret,vijt]
Right: [kret,kcall]

--------------------------------------------------------------------------------
indirect                  100%  ################################################################################
jump                      100%  ################################################################################
ra                        100%  ################################################################################
ret                       100%  ################################################################################
security                  100%  ################################################################################
instr(ret)                 75%  ############################################################
instr(vijt)                75%  ############################################################
pc                          0%  
trying splittag `indirect`...
Left: [ret]
Right: [vijt]

--------------------------------------------------------------------------------
call                      100%  ################################################################################
ret                       100%  ################################################################################
instr(kcall)               75%  ############################################################
instr(kret)                75%  ############################################################
kernel                      0%  
kr                          0%  
pc                          0%  
trying splittag `call`...
Left: [kret]
Right: [kcall]

--------------------------------------------------------------------------------
boolean                    75%  ############################################################
cc                         50%  ########################################
push                       50%  ########################################
cy                         25%  ####################
data                       25%  ####################
ov                         25%  ####################
instr(tand)                19%  ###############
instr(tcy)                 19%  ###############
instr(tdup)                19%  ###############
instr(tnot)                19%  ###############
instr(tor)                 19%  ###############
instr(tov)                 19%  ###############
instr(tpush0)              19%  ###############
instr(tpush1)              19%  ###############
ts                          0%  
trying splittag `boolean`...
Left: [tov,tcy,tpush0,tpush1,tdup]
Right: [tnot,tand,tor]

--------------------------------------------------------------------------------
cc                         80%  ################################################################
push                       80%  ################################################################
cy                         40%  ################################
data                       40%  ################################
ov                         40%  ################################
instr(tcy)                 30%  ########################
instr(tdup)                30%  ########################
instr(tov)                 30%  ########################
instr(tpush0)              30%  ########################
instr(tpush1)              30%  ########################
ts                          0%  
trying splittag `cc`...
Left: [tpush0,tpush1,tdup]
Right: [tov,tcy]

--------------------------------------------------------------------------------
push                       67%  #####################################################
data                       67%  #####################################################
instr(tdup)                50%  ########################################
instr(tpush0)              50%  ########################################
instr(tpush1)              50%  ########################################
ts                          0%  
trying splittag `push`...
Left: [tdup]
Right: [tpush0,tpush1]

--------------------------------------------------------------------------------
instr(tpush0)              75%  ############################################################
instr(tpush1)              75%  ############################################################
push                        0%  
ts                          0%  
trying splittag `instr(tpush0)`...
Left: [tpush1]
Right: [tpush0]

--------------------------------------------------------------------------------
cy                        100%  ################################################################################
ov                        100%  ################################################################################
instr(tcy)                 75%  ############################################################
instr(tov)                 75%  ############################################################
cc                          0%  
ts                          0%  
trying splittag `cy`...
Left: [tov]
Right: [tcy]

--------------------------------------------------------------------------------
instr(tand)                50%  ########################################
instr(tnot)                50%  ########################################
instr(tor)                 50%  ########################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tand)`...
Left: [tnot,tor]
Right: [tand]

--------------------------------------------------------------------------------
instr(tnot)                75%  ############################################################
instr(tor)                 75%  ############################################################
boolean                     0%  
ts                          0%  
trying splittag `instr(tnot)`...
Left: [tor]
Right: [tnot]

--------------------------------------------------------------------------------
prsv                      100%  ################################################################################
rstr                      100%  ################################################################################
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           15%  ############
instr('prsv.gp')           15%  ############
instr('prsv.mp')           15%  ############
instr('prsv.ra')           15%  ############
instr('prsv.ts')           15%  ############
instr('rstr.cc')           15%  ############
instr('rstr.gp')           15%  ############
instr('rstr.mp')           15%  ############
instr('rstr.ra')           15%  ############
instr('rstr.ts')           15%  ############
prsv_rstr                   0%  
sp                          0%  
trying splittag `prsv`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp','rstr.cc']
Right: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp','prsv.cc']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('rstr.cc')           30%  ########################
instr('rstr.gp')           30%  ########################
instr('rstr.mp')           30%  ########################
instr('rstr.ra')           30%  ########################
instr('rstr.ts')           30%  ########################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `cc`...
Left: ['rstr.mp','rstr.ts','rstr.ra','rstr.gp']
Right: ['rstr.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('rstr.gp')           38%  ##############################
instr('rstr.mp')           38%  ##############################
instr('rstr.ra')           38%  ##############################
instr('rstr.ts')           38%  ##############################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `gp`...
Left: ['rstr.mp','rstr.ts','rstr.ra']
Right: ['rstr.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('rstr.mp')           50%  ########################################
instr('rstr.ra')           50%  ########################################
instr('rstr.ts')           50%  ########################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `mp`...
Left: ['rstr.ts','rstr.ra']
Right: ['rstr.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('rstr.ra')           75%  ############################################################
instr('rstr.ts')           75%  ############################################################
prsv_rstr                   0%  
rstr                        0%  
sp                          0%  
trying splittag `ra`...
Left: ['rstr.ts']
Right: ['rstr.ra']

--------------------------------------------------------------------------------
cc                         40%  ################################
gp                         40%  ################################
mp                         40%  ################################
ra                         40%  ################################
ts                         40%  ################################
instr('prsv.cc')           30%  ########################
instr('prsv.gp')           30%  ########################
instr('prsv.mp')           30%  ########################
instr('prsv.ra')           30%  ########################
instr('prsv.ts')           30%  ########################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `cc`...
Left: ['prsv.mp','prsv.ts','prsv.ra','prsv.gp']
Right: ['prsv.cc']

--------------------------------------------------------------------------------
gp                         50%  ########################################
mp                         50%  ########################################
ra                         50%  ########################################
ts                         50%  ########################################
instr('prsv.gp')           38%  ##############################
instr('prsv.mp')           38%  ##############################
instr('prsv.ra')           38%  ##############################
instr('prsv.ts')           38%  ##############################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `gp`...
Left: ['prsv.mp','prsv.ts','prsv.ra']
Right: ['prsv.gp']

--------------------------------------------------------------------------------
mp                         67%  #####################################################
ra                         67%  #####################################################
ts                         67%  #####################################################
instr('prsv.mp')           50%  ########################################
instr('prsv.ra')           50%  ########################################
instr('prsv.ts')           50%  ########################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `mp`...
Left: ['prsv.ts','prsv.ra']
Right: ['prsv.mp']

--------------------------------------------------------------------------------
ra                        100%  ################################################################################
ts                        100%  ################################################################################
instr('prsv.ra')           75%  ############################################################
instr('prsv.ts')           75%  ############################################################
prsv                        0%  
prsv_rstr                   0%  
sp                          0%  
trying splittag `ra`...
Left: ['prsv.ts']
Right: ['prsv.ra']

#ruledef Instruction {
	lb {rs: Reg}, [{rd: Reg} + {simm: s6}] => 0b11 @ 0b11`2 @ simm @ rd @ rs
	lw {rs: Reg}, [{rd: Reg} + {simm: s6}] => 0b11 @ 0b01`2 @ simm @ rd @ rs
	sb [{rd: Reg} + {simm: s6}], {rs: Reg} => 0b11 @ 0b10`2 @ simm @ rs @ rd
	sw [{rd: Reg} + {simm: s6}], {rs: Reg} => 0b11 @ 0b00`2 @ simm @ rs @ rd
	call {abs_lbl: s13} => {
		rel_lbl = abs_lbl`13 - $
		0b101 @ rel_lbl`13
	}
	b {abs_lbl: s10} => {
		rel_lbl = abs_lbl`10 - $
		0b1001 @ 0b0`2 @ rel_lbl`10
	}
	bt {abs_lbl: s10} => {
		rel_lbl = abs_lbl`10 - $
		0b1001 @ 0b10`2 @ rel_lbl`10
	}
	bf {abs_lbl: s10} => {
		rel_lbl = abs_lbl`10 - $
		0b1001 @ 0b11`2 @ rel_lbl`10
	}
	li {rd: Reg}, {simm: s8} => 0b1000 @ 0b0`1 @ simm @ rd
	szi {rd: Reg}, {imm: u8} => 0b1000 @ 0b1`1 @ imm @ rd
	lgb {rd: Reg}, [{rs: Reg} + {disp: u6}] => 0b01 @ 0b00011`5 @ disp @ rs @ rd
	lgw {rd: Reg}, [{rs: Reg} + {disp: u6}] => 0b01 @ 0b00001`5 @ disp @ rs @ rd
	sgb [{rd: Reg} + {disp: u6}], {rs: Reg} => 0b01 @ 0b00010`5 @ disp @ rs @ rd
	sgw [{rd: Reg} + {disp: u6}], {rs: Reg} => 0b01 @ 0b00000`5 @ disp @ rs @ rd
	tbit {bit_idx: u6}, {rs: Reg} => 0b01 @ 0b01100`5 @ bit_idx @ rs
	cbit {bit_idx: u6}, {rd: Reg} => 0b01 @ 0b01011`5 @ bit_idx @ rd
	sbit {bit_idx: u6}, {rd: Reg} => 0b01 @ 0b01010`5 @ bit_idx @ rd
	tli {rs: Reg}, {simm: s6} => 0b01 @ 0b01111`5 @ simm @ rs
	tgei {rs: Reg}, {simm: s6} => 0b01 @ 0b01101`5 @ simm @ rs
	tbi {rs: Reg}, {imm: u6} => 0b01 @ 0b01110`5 @ imm @ rs
	taei {rs: Reg}, {imm: u6} => 0b01 @ 0b01100`5 @ imm @ rs
	tnei {rs: Reg}, {simm: s6} => 0b01 @ 0b00101`5 @ simm @ rs
	teqi {rs: Reg}, {simm: s6} => 0b01 @ 0b00100`5 @ simm @ rs
	addi {rd: Reg}, {simm: s6} => 0b01 @ 0b1111110`5 @ simm @ rd
	subi {rd: Reg}, {simm: s6} => 0b01 @ 0b1111100`5 @ simm @ rd
	andi {rd: Reg}, {simm: s6} => 0b01 @ 0b111101`5 @ simm @ rd
	ori {rd: Reg}, {simm: s6} => 0b01 @ 0b1111001`5 @ simm @ rd
	xori {rd: Reg}, {simm: s6} => 0b01 @ 0b1111000`5 @ simm @ rd
	addicy {rd: Reg}, {simm: s6} => 0b01 @ 0b1111111`5 @ simm @ rd
	subicy {rd: Reg}, {simm: s6} => 0b01 @ 0b1111101`5 @ simm @ rd
	lsr {rd: Reg}, {imm: u6} => 0b01 @ 0b10010`5 @ imm @ rd
	lsl {rd: Reg}, {imm: u6} => 0b01 @ 0b01000`5 @ imm @ rd
	asr {rd: Reg}, {imm: u6} => 0b01 @ 0b10011`5 @ imm @ rd
	tbitm [{rs: Reg}], {imm: u6} => 0b01 @ 0b11010`5 @ imm @ rs
	cbitm [{rs: Reg}], {imm: u6} => 0b01 @ 0b01110`5 @ imm @ rs
	sbitm [{rs: Reg}], {imm: u6} => 0b01 @ 0b11011`5 @ imm @ rs
	add {rd: Reg}, {rs: Reg} => 0b000001 @ 0b1110`4 @ rs @ rd
	sub {rd: Reg}, {rs: Reg} => 0b000001 @ 0b1100`4 @ rs @ rd
	and {rd: Reg}, {rs: Reg} => 0b000001 @ 0b0101`4 @ rs @ rd
	or {rd: Reg}, {rs: Reg} => 0b000001 @ 0b1001`4 @ rs @ rd
	xor {rd: Reg}, {rs: Reg} => 0b000001 @ 0b1000`4 @ rs @ rd
	mov {rd: Reg}, {rs: Reg} => 0b000001 @ 0b0000`4 @ rs @ rd
	addcy {rd: Reg}, {rs: Reg} => 0b000001 @ 0b1111`4 @ rs @ rd
	subcy {rd: Reg}, {rs: Reg} => 0b000001 @ 0b1101`4 @ rs @ rd
	tl {r1: Reg}, {r2: Reg} => 0b0000001 @ 0b011`3 @ r2 @ r1
	tge {r1: Reg}, {r2: Reg} => 0b0000001 @ 0b001`3 @ r2 @ r1
	tb {r1: Reg}, {r2: Reg} => 0b0000001 @ 0b010`3 @ r2 @ r1
	tae {r1: Reg}, {r2: Reg} => 0b0000001 @ 0b000`3 @ r2 @ r1
	tne {r1: Reg}, {r2: Reg} => 0b00000001 @ 0b01`2 @ r2 @ r1
	teq {r1: Reg}, {r2: Reg} => 0b00000001 @ 0b00`2 @ r2 @ r1
	mulstep ({multiplicand_hi: Reg},{multiplicand_lo: Reg}), {multiplier: Reg} => 0b00001 @ 0b00`2 @ multiplicand_hi @ multiplicand_lo @ multiplier
	pushb {rs: Reg} => 0b000000001 @ 0b0110`4 @ rs
	pushw {rs: Reg} => 0b000000001 @ 0b0100`4 @ rs
	popb {rd: Reg} => 0b000000001 @ 0b0111`4 @ rd
	popw {rd: Reg} => 0b000000001 @ 0b0101`4 @ rd
	callr {abs_lbl: Reg} => 0b000000001 @ 0b0001`4 @ abs_lbl
	jr {abs_lbl: Reg} => 0b000000001 @ 0b0000`4 @ abs_lbl
	neg {rd: Reg} => 0b000000001 @ 0b0010`4 @ rd
	seb {rd: Reg} => 0b000000001 @ 0b0011`4 @ rd
	rd.mp.lo {rd: Reg} => 0b0000000001 @ 0b000`3 @ rd
	rd.mp.hi {rd: Reg} => 0b0000000001 @ 0b001`3 @ rd
	rd.gp {rd: Reg} => 0b0000000001 @ 0b011`3 @ rd
	wr.gp {rs: Reg} => 0b0000000001 @ 0b010`3 @ rs
	NONEXE0  => 0b0000000000 @ 0b000000`6
	BREAK  => 0b0000000000 @ 0b000011`6
	UNIMPL  => 0b0000000000 @ 0b000010`6
	kret  => 0b0000000000 @ 0b000110`6
	kcall  => 0b0000000000 @ 0b000111`6
	ret  => 0b0000000000 @ 0b000100`6
	tov  => 0b0000000000 @ 0b001010`6
	tcy  => 0b0000000000 @ 0b001011`6
	clr.cy  => 0b0000000000 @ 0b000011`6
	set.cy  => 0b0000000000 @ 0b000010`6
	tpush0  => 0b0000000000 @ 0b010011`6
	tpush1  => 0b0000000000 @ 0b010010`6
	tnot  => 0b0000000000 @ 0b001101`6
	tand  => 0b0000000000 @ 0b000111`6
	tor  => 0b0000000000 @ 0b001100`6
	tdup  => 0b0000000000 @ 0b001000`6
	prsv.mp  => 0b0000000000 @ 0b011001`6
	rstr.mp  => 0b0000000000 @ 0b010001`6
	prsv.ts  => 0b0000000000 @ 0b110000`6
	rstr.ts  => 0b0000000000 @ 0b100000`6
	prsv.ra  => 0b0000000000 @ 0b110001`6
	rstr.ra  => 0b0000000000 @ 0b100001`6
	prsv.gp  => 0b0000000000 @ 0b001101`6
	rstr.gp  => 0b0000000000 @ 0b001001`6
	prsv.cc  => 0b0000000000 @ 0b000111`6
	rstr.cc  => 0b0000000000 @ 0b000101`6
	sleep  => 0b0000000000 @ 0b000001`6
	vijt  => 0b0000000000 @ 0b000101`6

	clr {r: Reg} => asm { xor {r}, {r} }
	nop  => asm { ori sp, 0 }
	incr {r: Reg} => asm { addi {r}, 1 }
	decr {r: Reg} => asm { addi {r}, -1 }
	inv {r: Reg} => asm { xori {r}, -1 }
	not {r: Reg} => asm { xori {r}, 1 }
	tg {r1: Reg}, {r2: Reg} => asm { tl {r2}, {r1} }
	tle {r1: Reg}, {r2: Reg} => asm { tge {r2}, {r1} }
	ta {r1: Reg}, {r2: Reg} => asm { ta {r2}, {r1} }
	tbe {r1: Reg}, {r2: Reg} => asm { tae {r2}, {r1} }
	HALT  => asm { b 0 }
}

#const SPRIND_SUBR_ALIGN = 4

